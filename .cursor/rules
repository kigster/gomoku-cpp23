# CLAUDE

## The Game

This is a C implementation of the ancient game called Gomoku (or "Five-in-a-Row" in Europe, or "Крестики и Нолики" in Russian speaking countries)

The particular version of the game implementation features two opponents, where "naughts", shown as "O" or а Unicode "○", and the other uses "X", on the game board shown as "✕".

The "✕" always moves first, and (as research shows) that carriers a slight advantage. The computer moves next with an "○", and that's computed using a MiniMax algorithm with Alpha/Beta Pruning for speed up.

## Why does this exist?

The computer algorithm is an exploration and an example of combining a famous MiniMax algorithm with Alpha/Beta Pruning with a better-than-average heuristic function used for the evaluation function.

## The Artifacts Provided for AI

We are allowed to use the following external resources to optimize our implementation and make it competitive — feel free to import, cache, and store with the project any conclusions you might arrive from these papers.

- https://arxiv.org/pdf/2111.01016
- https://cdn.aaai.org/Symposia/Fall/1993/FS-93-02/FS93-02-001.pdf
- https://personalpages.manchester.ac.uk/staff/stefan.guettel/py/Coursework_2022_new.pdf

We are looking, of course, at any advantage compared to our existing algorithm.

## The MiniMax Algorithm with Alpha/Beta Pruning

A quick recap of the algorithm:

### 1. The Evaluation Function

The evaluation function (also called a heuristic function) is a critical component that estimates the "goodness" of a game position from a particular player's perspective.

- Inputs: The evaluation function takes a game state (board position) as input. This represents the current configuration of the game at any given node in the search tree.

- Output: It returns a numerical score that represents how favorable that position is for the maximizing player.

The convention is typically:

- Positive values = good for the maximizing player
- Negative values = good for the minimizing player
- Zero = neutral position
- Extreme values (like +∞/-∞) = winning/losing positions

For example, in chess, the evaluation might consider piece values, positional factors, king safety, etc., and output something like +2.5 (favoring white) or -1.8 (favoring black).

### 2. How Alpha-Beta Pruning Uses Evaluation Results

Alpha-beta pruning uses two key values that get updated as the algorithm explores the tree:

- **Alpha (α)**: The best score the maximizing player can guarantee so far
- **Beta (β)**: The best score the minimizing player can guarantee so far

The pruning logic works as follows:

- At maximizing nodes: If the current evaluation is ≥ beta, we can stop exploring siblings because the minimizing player (who controls the parent node) will never choose this path—they already have a better option.
- At minimizing nodes: If the current evaluation is ≤ alpha, we can stop exploring siblings because the maximizing player (who controls the parent node) will never choose this path—they already have a better option.

Why this works: The key insight is that if we find a move that's "too good" for the current player, the opponent (who made the previous move) would never have allowed us to reach this position in the first place, since they have better alternatives available to them.

This pruning can dramatically reduce the search space while guaranteeing the same result as the full minimax search.

## The Tests

The code uses the [GoogleTest library](https://github.com/google/googletest), and executes a test run on [CI (using Github Actions)](https://github.com/kigster/gomoku-ansi-c/actions). It's important that the tests pass before each pull request merge, and that we add the tests to any new features or functionality.

## Diving into Details

### What This Game is Today: Features

This is a ASCII-text only game where we are able to position cursor at specific locations and control the screen that way.

We can also auto-detect screen width and screen height using ANSII escape codes and

- **Interactive Console Interface**: Unicode-based board display with keyboard controls
- **AI Opponent**: Intelligent AI using MiniMax algorithm with Alpha-Beta pruning
- **Configurable Difficulty**: Easy, Medium, and Hard levels with different search depths
- **Timeout Support**: Optional move time limits for both human and AI players
- **Undo Functionality**: Undo the last move pair (human + AI)
- **Cross-platform**: Works on Linux, macOS, and other Unix-like systems
- **Comprehensive Testing**: Full test suite using Google Test framework

### Game Rules

Gomoku is a strategy game where players take turns placing stones on a board. The goal is to be the first to get five stones in a row (horizontally, vertically, or diagonally).

- **Human plays first** (Crosses stones ✕) - this is an advantage
- **AI plays second** (Naughts stones ○)
- **Win condition**: First to get exactly 5 in a row wins
- **Overline rule**: Six or more stones in a row do NOT count as a win

---

### Getting Started

#### Prerequisites

- **GCC compiler** (or any C compiler)
- **Make** build system
- **Git** (for downloading Google Test framework)

#### Building the Game

```bash
# Clone the repository
git clone https://github.com/kigster/gomoku-ansi-c.git
cd gomoku-ansi-c

# Build the game
make

# Clean build files if needed
make clean
```

### Help Screen

Below is the screenshot of the help screen of the game, since it's a CLI/Terminal game.

<img src="doc/gomoku-help.png" width="700" border="1" style="border-radius: 10px"/>

#### Running the Game

```bash
# Run with default settings (Medium difficulty, 19x19 board)
./gomoku

# Run with easy difficulty on a 15x15 board
./gomoku --level easy --board 15

# Run with custom search depth and timeout
./gomoku --depth 6 --timeout 30

# Show all available options
./gomoku --help
```

### Command Line Options

| Option             | Description                                | Example        |
| ------------------ | ------------------------------------------ | -------------- |
| `-l, --level M`    | Difficulty: `easy`, `intermediate`, `hard` | `--level hard` |
| `-d, --depth N`    | Search depth (1-10) for AI algorithm       | `--depth 5`    |
| `-t, --timeout T`  | Move timeout in seconds (optional)         | `--timeout 30` |
| `-b, --board SIZE` | Board size: 15 or 19 (default: 19)         | `--board 15`   |
| `-h, --help`       | Show help message                          | `--help`       |

#### Game Controls

- **Arrow Keys**: Move cursor around the board
- **Space/Enter**: Place a stone at cursor position
- **U**: Undo last move pair (human + AI)
- **?**: Show detailed game rules and help
- **ESC/Q**: Quit the game

#### Difficulty Levels

| Level            | Search Depth | Response Time   | Best For                   |
| ---------------- | ------------ | --------------- | -------------------------- |
| **Easy**         | 2            | < 0.1 seconds   | Beginners, casual play     |
| **Intermediate** | 4            | 0.1-0.5 seconds | Default, balanced gameplay |
| **Hard**         | 6            | 0.5-3 seconds   | Challenging, advanced play |

---

## Developer Information

### Architecture Overview

The project follows a modular architecture with clear separation of concerns:

```
src/
├── main.c      # Simple orchestrator (105 lines)
├── gomoku.c/.h # Core evaluation functions
├── board.c/.h  # Board management and coordinate utilities
├── game.c/.h   # Game logic and state management
├── ai.c/.h     # AI module with minimax search
├── ui.c/.h     # User interface and display
└── cli.c/.h    # Command-line argument parsing
```

### AI Algorithm Implementation

#### MiniMax with Alpha-Beta Pruning

- **Search Algorithm**: MiniMax with alpha-beta pruning for optimal performance
- **Evaluation Function**: Pattern-based position assessment using threat matrices
- **Timeout Support**: Configurable time limits with graceful degradation
- **Smart Move Ordering**: Prioritizes winning moves and threats for better pruning

#### Pattern Recognition System

The AI recognizes various threat patterns with weighted scoring:

| Pattern             | Score     | Description                   |
| ------------------- | --------- | ----------------------------- |
| **Five in a row**   | 1,000,000 | Winning position              |
| **Straight four**   | 50,000    | Immediate win threat          |
| **Three in a row**  | 1,000     | Strong threat                 |
| **Broken patterns** | 100-500   | Partial threats with gaps     |
| **Combinations**    | Bonus     | Multiple simultaneous threats |

#### Search Space Optimization

- **Proximity-based Search**: Only considers moves within 3 cells of existing stones
- **Early Game Optimization**: Focuses on center area when board is empty
- **First Move Randomization**: AI's first move placed randomly 1-2 squares from human's move
- **Performance Boost**: Reduces search space from 361 to ~20-50 moves per turn

### Testing Framework

The project includes a comprehensive test suite with 20 test cases using Google Test:

```bash
# Build and run all tests
make test

# Test categories covered:
# - Board creation and coordinate utilities
# - Move validation and game state management
# - Win detection in all directions (horizontal, vertical, diagonal)
# - Pattern recognition and threat analysis
# - Evaluation function accuracy
# - MiniMax algorithm functionality
# - Undo functionality and edge cases
```

#### Test Results

- ✅ **20/20 tests passing**
- ✅ Board initialization and management
- ✅ Win detection in all directions
- ✅ Pattern recognition and threat analysis
- ✅ Evaluation functions and AI logic
- ✅ Game state management and undo functionality

### Performance Metrics

| Difficulty | Search Depth | Avg Response Time | Positions Evaluated |
| ---------- | ------------ | ----------------- | ------------------- |
| Easy       | 2            | < 0.1 seconds     | ~10-25              |
| Medium     | 4            | 0.1-0.5 seconds   | ~50-200             |
| Hard       | 6            | 0.5-3 seconds     | ~200-800            |

**Key Optimizations:**

- **Move Ordering**: 3-5x faster with intelligent priority sorting
- **Incremental Evaluation**: Only evaluates positions near the last move
- **Alpha-Beta Pruning**: Reduces effective branching factor significantly
- **Early Termination**: Immediately selects winning moves

### Core Functions

#### Game Logic (`game.c`)

- `init_game()`: Initialize game state and board
- `make_move()`: Validate and execute player moves
- `undo_last_moves()`: Undo functionality for move pairs
- `start_move_timer()` / `end_move_timer()`: Timing system

#### AI Engine (`ai.c`)

- `find_best_ai_move()`: Main AI move selection with timeout support
- `minimax_with_timeout()`: MiniMax algorithm with time limits
- `get_move_priority()`: Move ordering for alpha-beta optimization
- `is_winning_move()`: Immediate win detection

#### Evaluation System (`gomoku.c`)

- `evaluate_position()`: Main board evaluation function
- `calc_score_at()`: Threat analysis for individual positions
- `has_winner()`: Win condition detection in all directions
- `populate_threat_matrix()`: Initialize pattern recognition system

### Algorithm Complexity

- **Time Complexity**: O(b^d) where b is branching factor and d is depth
- **Space Complexity**: O(d) for recursion stack
- **Optimization**: Alpha-beta pruning reduces effective branching factor from ~30 to ~5-10

---

## License & Copyright

This project is © Konstantin Gredeskoul, 2025. It is open source and can be distributed under the MIT License.

## Contributing

Contributions are welcome! Please feel free to submit issues, feature requests, or pull requests.

## Acknowledgments

- Pattern recognition algorithms adapted from traditional Gomoku AI techniques
- Google Test framework for comprehensive testing
- Unicode characters for enhanced visual display
- Claude-4-MAX for being a great pair programmer.
